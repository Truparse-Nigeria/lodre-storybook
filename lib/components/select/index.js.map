{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/components/select/index.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAiB,QAAQ,EAAE,MAAM,OAAO,CAAC;AACvD,OAAO,EAAE,MAAM,EAAQ,SAAS,EAAE,MAAM,IAAI,CAAC;AAC7C,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,OAAO,EACL,aAAa,EACb,sBAAsB,EACtB,iBAAiB,GAClB,MAAM,UAAU,CAAC;AAiBlB,IAAM,WAAW,GAAyB,UAAC,EAQ1C;;QAPC,OAAO,aAAA,EACP,oBAAqB,EAArB,YAAY,mBAAG,MAAM,KAAA,EACrB,mBAA6B,EAA7B,WAAW,mBAAG,eAAe,KAAA,EAC7B,kBAAmB,EAAnB,UAAU,mBAAG,MAAM,KAAA,EACnB,YAAY,kBAAA,EACZ,oBAAiB,EAAjB,YAAY,mBAAG,EAAE,KAAA,EACjB,MAAM,YAAA;IAEA,IAAA,KAAwB,QAAQ,CAAU,KAAK,CAAC,EAA/C,OAAO,QAAA,EAAE,UAAU,QAA4B,CAAC;IACjD,IAAA,KAAoB,QAAQ,CAChC,YAAY,KAAK,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,WAAW,CACjD,EAFM,KAAK,QAAA,EAAE,QAAQ,QAErB,CAAC;IACI,IAAA,KAAoB,QAAQ,CAAU,KAAK,CAAC,EAA3C,KAAK,QAAA,EAAE,QAAQ,QAA4B,CAAC;IAEnD,oBAAoB;IACpB,yCAAyC;IACzC,gDAAgD;IAChD,yCAAyC;IACzC,8EAA8E;IAC9E,yBAAyB;IACzB,qCAAqC;IACrC,0BAA0B;IAC1B,iBAAiB;IACjB,2BAA2B;IAC3B,UAAU;IACV,UAAU;IACV,MAAM;IACN,2DAA2D;IAC3D,UAAU;IAEV,OAAO,CACL,oBAAC,iBAAiB,IAChB,UAAU,EAAE,UAAU,EACtB,YAAY,EAAE,YAAY,EAC1B,OAAO,EAAE,OAAO;QAEhB,oBAAC,MAAM,IACL,SAAS,EAAC,QAAQ,EAClB,IAAI,EAAC,QAAQ,EACb,OAAO,EAAE,cAAM,OAAA,UAAU,CAAC,CAAC,OAAO,CAAC,EAApB,CAAoB;YAElC,CAAA,MAAA,OAAO,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,KAAK,KAAK,CAAC,CAAC,KAAK,EAAjB,CAAiB,CAAC,CAAC,CAAC,CAAC,0CAAE,IAAI,KAAI,WAAW;YACjE,oBAAC,SAAS,IAAC,SAAS,EAAC,MAAM,GAAG,CACvB;QACT,oBAAC,sBAAsB,IACrB,MAAM,EAAE,MAAM,EACd,UAAU,EAAC,OAAO,EAClB,OAAO,EAAE,OAAO,IAEf,OAAO,CAAC,GAAG,CAAC,UAAC,OAAgB,EAAE,KAAa,IAAK,OAAA,CAChD,oBAAC,aAAa,IACZ,QAAQ,EAAE,KAAK,KAAK,OAAO,CAAC,KAAK,EACjC,OAAO,EAAE;gBACP,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACxB,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAC5B,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC;YACvB,CAAC,EACD,GAAG,EAAE,KAAK;YAEV,oBAAC,SAAS,IAAC,IAAI,EAAC,QAAQ,EAAC,MAAM,EAAC,MAAM,IACnC,OAAO,CAAC,IAAI,CACH,CACE,CACjB,EAdiD,CAcjD,CAAC,CACqB,CACP,CACrB,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,WAAW,CAAC","sourcesContent":["import React, { FC, useEffect, useState } from \"react\";\r\nimport { Button, Card, Paragraph } from \"..\";\r\nimport { ArrowDown } from \"../../icons\";\r\nimport { PaletteType } from \"../../tokens/color\";\r\nimport {\r\n  StyledOptions,\r\n  StyledOptionsContainer,\r\n  StyledSelectField,\r\n} from \"./styled\";\r\n\r\ntype Options = {\r\n  value: string;\r\n  text: string;\r\n};\r\n\r\ninterface SelectFieldProps {\r\n  options: Options[];\r\n  placeholder?: string;\r\n  borderRadius?: string;\r\n  handleChange: Function;\r\n  background?: PaletteType;\r\n  defaultValue?: string;\r\n  height?: number;\r\n}\r\n\r\nconst SelectField: FC<SelectFieldProps> = ({\r\n  options,\r\n  borderRadius = \"10px\",\r\n  placeholder = \"Select option\",\r\n  background = \"grey\",\r\n  handleChange,\r\n  defaultValue = \"\",\r\n  height,\r\n}) => {\r\n  const [focused, setFocused] = useState<boolean>(false);\r\n  const [value, setValue] = useState<string>(\r\n    defaultValue !== \"\" ? defaultValue : placeholder\r\n  );\r\n  const [atEnd, setAtEnd] = useState<boolean>(false);\r\n\r\n  // useEffect(() => {\r\n  //   if (typeof window !== \"undefined\") {\r\n  //     window.addEventListener(\"scroll\", () => {\r\n  //       const body = window.innerHeight;\r\n  //       const dropdown = (document.getElementById(\"dropdown\") as HTMLElement)\r\n  //         .scrollHeight;\r\n  //       if (body - dropdown === 0) {\r\n  //         setAtEnd(true);\r\n  //       } else {\r\n  //         setAtEnd(false);\r\n  //       }\r\n  //     });\r\n  //   }\r\n  //   return window.removeEventListener(\"scroll\", () => {});\r\n  // }, []);\r\n\r\n  return (\r\n    <StyledSelectField\r\n      background={background}\r\n      borderRadius={borderRadius}\r\n      focused={focused}\r\n    >\r\n      <Button\r\n        className=\"button\"\r\n        type=\"button\"\r\n        onClick={() => setFocused(!focused)}\r\n      >\r\n        {options.filter((e) => value === e.value)[0]?.text || placeholder}\r\n        <ArrowDown className=\"icon\" />\r\n      </Button>\r\n      <StyledOptionsContainer\r\n        height={height}\r\n        background=\"light\"\r\n        focused={focused}\r\n      >\r\n        {options.map((options: Options, index: number) => (\r\n          <StyledOptions\r\n            selected={value === options.value}\r\n            onClick={() => {\r\n              setValue(options.value);\r\n              handleChange(options.value);\r\n              setFocused(!focused);\r\n            }}\r\n            key={index}\r\n          >\r\n            <Paragraph size=\"pSmall\" weight=\"w500\">\r\n              {options.text}\r\n            </Paragraph>\r\n          </StyledOptions>\r\n        ))}\r\n      </StyledOptionsContainer>\r\n    </StyledSelectField>\r\n  );\r\n};\r\n\r\nexport default SelectField;\r\n"]}